rhs,
dualstill ,
sep = " <= ", remove = FALSE) %>%
select(c("rhs","Sensitivity"))
colnames(rhs)[1] <- c('Rhs')
print(rhs)
}
printSensitivityRHS(model)
printSensitivityObj <- function(model){
options(scipen=999)
arg.obj = get.sensitivity.obj(model)
numRows <- length(arg.obj$objfrom)
symb <- c()
7
for (i in c(1:numRows)) symb[i] <- paste("C", i, sep = "" )
obj <- data.frame(Objs = symb, arg.obj)
obj<-
obj %>%
mutate(objfrom=replace(objfrom, objfrom < -1.0e4, "-inf")) %>%
mutate(objtill=replace(objtill, objtill > 1.0e4, "inf")) %>%
unite(col = "Sensitivity",
objfrom, Objs, objtill ,
sep = " <= ", remove = FALSE) %>%
select(c("Objs","Sensitivity"))
print(obj)
}
printSensitivityObj(model)
# Save a single object to a file
saveRDS(mtcars, "mtcars.rds")
# Restore it under a different name
my_data <- readRDS("mtcars.rds")
# Use 'verbatim = TRUE' as chunk option to show chunk code as is
require(knitr)
hook_source_def = knit_hooks$get('source')
knit_hooks$set(source = function(x, options){
if (!is.null(options$verbatim) && options$verbatim){
opts = gsub(",\\s*verbatim\\s*=\\s*TRUE\\s*", "", options$params.src)
bef = sprintf('\n\n    ```{r %s}\n', opts, "\n")
stringr::str_c(bef, paste(knitr:::indent_block(x, "    "), collapse = '\n'), "\n    ```\n")
} else {
hook_source_def(x, options)
}
})
library(lpSolveAPI)
model <- make.lp(0,12)
lp.control(model, sense="max")
set.objfn(model, obj=c(3500,2500,2000,3500,2500,2000,3500,2500,2000,3500,2500,2000))
add.constraint(model,
xt=c(1,1,1,1),
type= "<=", rhs=20,
indices=c(1,4,7,10))
add.constraint(model,
xt=c(1,1,1,1),
type="<=", rhs=10,
indices=c(2,5,8,11))
add.constraint(model,
xt=c(1,1,1,1),
type= "<=", rhs=18,
indices = c(3,6,9,12))
add.constraint(model,
xt=c(500,300,400),
type= "<=", rhs=5000,
indices = c(1,2,3))
add.constraint(model,
xt=c(500,300,400),
type= "<=", rhs=4000,
indices = c(4,5,6))
add.constraint(model,
xt=c(500,300,400),
type= "<=", rhs=8000,
indices = c(7,8,9))
add.constraint(model,
xt=c(500,300,400),
type= "<=", rhs=2500,
indices = c(10,11,12))
add.constraint(model,
xt=c(1,1,1),
type= "<=", rhs=10,
indices = c(1,2,3))
add.constraint(model,
xt=c(1,1,1),
type= "<=", rhs=8,
indices = c(4,5,6))
add.constraint(model,
xt=c(1,1,1),
type= "<=", rhs=12,
indices = c(7,8,9))
add.constraint(model,
xt=c(1,1,1),
type= "<=", rhs=6,
indices = c(10,11,12))
set.bounds(model,lower=c(0,0,0,0,0,0,0,0,0,0,0,0))
solve(model)
get.variables(model)
get.objective(model)
get.constraints(model)
get.primal.solution(model)
get.basis(model,nonbasic = FALSE)
get.dual.solution(lprec=model)
get.sensitivity.rhs(model)
get.sensitivity.obj(model)
require(dplyr)
require(tidyr)
printSensitivityRHS <- function(model){
options(scipen = 999)
arg.rhs <- get.sensitivity.rhs(model)
numRows <- length(arg.rhs$duals)
symb <- c()
for (i in c(1:numRows)) symb[i] <- paste("B", i, sep = "")
rhs <- data.frame(rhs = symb, arg.rhs)
rhs <- rhs %>%
mutate(dualsfrom=replace(dualsfrom, dualsfrom < -1.0e4, "-inf")) %>%
mutate(dualstill=replace(dualstill, dualstill > 1.0e4, "inf")) %>%
unite(col = "Sensitivity",
dualsfrom,
rhs,
dualstill ,
sep = " <= ", remove = FALSE) %>%
select(c("rhs","Sensitivity"))
colnames(rhs)[1] <- c('Rhs')
print(rhs)
}
printSensitivityRHS(model)
printSensitivityObj <- function(model){
options(scipen=999)
arg.obj = get.sensitivity.obj(model)
numRows <- length(arg.obj$objfrom)
symb <- c()
7
for (i in c(1:numRows)) symb[i] <- paste("C", i, sep = "" )
obj <- data.frame(Objs = symb, arg.obj)
obj<-
obj %>%
mutate(objfrom=replace(objfrom, objfrom < -1.0e4, "-inf")) %>%
mutate(objtill=replace(objtill, objtill > 1.0e4, "inf")) %>%
unite(col = "Sensitivity",
objfrom, Objs, objtill ,
sep = " <= ", remove = FALSE) %>%
select(c("Objs","Sensitivity"))
print(obj)
}
printSensitivityObj(model)
# Save a single object to a file
saveRDS(mtcars, "mtcars.rds")
# Restore it under a different name
my_data <- readRDS("mtcars.rds")
# Use 'verbatim = TRUE' as chunk option to show chunk code as is
require(knitr)
hook_source_def = knit_hooks$get('source')
knit_hooks$set(source = function(x, options){
if (!is.null(options$verbatim) && options$verbatim){
opts = gsub(",\\s*verbatim\\s*=\\s*TRUE\\s*", "", options$params.src)
bef = sprintf('\n\n    ```{r %s}\n', opts, "\n")
stringr::str_c(bef, paste(knitr:::indent_block(x, "    "), collapse = '\n'), "\n    ```\n")
} else {
hook_source_def(x, options)
}
})
library(lpSolveAPI)
model <- make.lp(0,12)
lp.control(model, sense="max")
set.objfn(model, obj=c(3500,2500,2000,3500,2500,2000,3500,2500,2000,3500,2500,2000))
add.constraint(model,
xt=c(1,1,1,1),
type= "<=", rhs=20,
indices=c(1,4,7,10))
add.constraint(model,
xt=c(1,1,1,1),
type="<=", rhs=10,
indices=c(2,5,8,11))
add.constraint(model,
xt=c(1,1,1,1),
type= "<=", rhs=18,
indices = c(3,6,9,12))
add.constraint(model,
xt=c(500,300,400),
type= "<=", rhs=5000,
indices = c(1,2,3))
add.constraint(model,
xt=c(500,300,400),
type= "<=", rhs=4000,
indices = c(4,5,6))
add.constraint(model,
xt=c(500,300,400),
type= "<=", rhs=8000,
indices = c(7,8,9))
add.constraint(model,
xt=c(500,300,400),
type= "<=", rhs=2500,
indices = c(10,11,12))
add.constraint(model,
xt=c(1,1,1),
type= "<=", rhs=10,
indices = c(1,2,3))
add.constraint(model,
xt=c(1,1,1),
type= "<=", rhs=8,
indices = c(4,5,6))
add.constraint(model,
xt=c(1,1,1),
type= "<=", rhs=12,
indices = c(7,8,9))
add.constraint(model,
xt=c(1,1,1),
type= "<=", rhs=6,
indices = c(10,11,12))
set.bounds(model,lower=c(0,0,0,0,0,0,0,0,0,0,0,0))
solve(model)
get.variables(model)
get.objective(model)
get.constraints(model)
get.primal.solution(model)
get.basis(model,nonbasic = FALSE)
get.dual.solution(lprec=model)
get.sensitivity.rhs(model)
get.sensitivity.obj(model)
require(dplyr)
require(tidyr)
printSensitivityRHS <- function(model){
options(scipen = 999)
arg.rhs <- get.sensitivity.rhs(model)
numRows <- length(arg.rhs$duals)
symb <- c()
for (i in c(1:numRows)) symb[i] <- paste("B", i, sep = "")
rhs <- data.frame(rhs = symb, arg.rhs)
rhs <- rhs %>%
mutate(dualsfrom=replace(dualsfrom, dualsfrom < -1.0e4, "-inf")) %>%
mutate(dualstill=replace(dualstill, dualstill > 1.0e4, "inf")) %>%
unite(col = "Sensitivity",
dualsfrom,
rhs,
dualstill ,
sep = " <= ", remove = FALSE) %>%
select(c("rhs","Sensitivity"))
colnames(rhs)[1] <- c('Rhs')
print(rhs)
}
printSensitivityRHS(model)
printSensitivityObj <- function(model){
options(scipen=999)
arg.obj = get.sensitivity.obj(model)
numRows <- length(arg.obj$objfrom)
symb <- c()
7
for (i in c(1:numRows)) symb[i] <- paste("C", i, sep = "" )
obj <- data.frame(Objs = symb, arg.obj)
obj<-
obj %>%
mutate(objfrom=replace(objfrom, objfrom < -1.0e4, "-inf")) %>%
mutate(objtill=replace(objtill, objtill > 1.0e4, "inf")) %>%
unite(col = "Sensitivity",
objfrom, Objs, objtill ,
sep = " <= ", remove = FALSE) %>%
select(c("Objs","Sensitivity"))
print(obj)
}
printSensitivityObj(model)
knit_with_parameters("C:/Users/abete/Downloads/Assignment 1 ABETE DAVIDE.Rmd")
# Use 'verbatim = TRUE' as chunk option to show chunk code as is
require(knitr)
hook_source_def = knit_hooks$get('source')
knit_hooks$set(source = function(x, options){
if (!is.null(options$verbatim) && options$verbatim){
opts = gsub(",\\s*verbatim\\s*=\\s*TRUE\\s*", "", options$params.src)
bef = sprintf('\n\n    ```{r %s}\n', opts, "\n")
stringr::str_c(bef, paste(knitr:::indent_block(x, "    "), collapse = '\n'), "\n    ```\n")
} else {
hook_source_def(x, options)
}
})
title: "Assignment 1 - Linear Programming"
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# installare nella console il pacchetto tinytex, per usare Latex
library(tinytex)
plot(c(1,2,3), c(4,5,6))
abline(h=5, col='red')
plot(c(1,2,3), c(4,5,6))
abline(h=5, col='green')
plot(c(1,2,3), c(4,5,6))
abline(h=5, col='blue')
plot(c(1,2,3), c(4,5,6))
abline(h=5, col='red')
knitr::opts_chunk$set(echo = TRUE)
# installare nella console il pacchetto tinytex, per usare Latex
library(tinytex)
plot(c(1,2,3), c(4,5,6))
abline(h=5, col='red')
set.seed(100)
lng=1000
Y=arima.sim(n=lng, list(ar=0.8, ma=0), sd=0.5)
par(mfrow=c(1,1), cex.axis=1, cex.lab=1, cex.main=1, fg="white", bg="black",
col.axis="white", col.lab="white", col.main="white")
plot(Y, col="yellow")
set.seed(50)
lng=50
Y=arima.sim(n=lng, list(ar=0.8, ma=0), sd=0.5)
par(mfrow=c(1,1), cex.axis=1, cex.lab=1, cex.main=1, fg="white", bg="black",
col.axis="white", col.lab="white", col.main="white")
plot(Y, col="yellow")
set.seed(100)
lng=50
Y=arima.sim(n=lng, list(ar=0.8, ma=0), sd=0.5)
par(mfrow=c(1,1), cex.axis=1, cex.lab=1, cex.main=1, fg="white", bg="black",
col.axis="white", col.lab="white", col.main="white")
plot(Y, col="yellow")
set.seed(100)
lng=100
Y=arima.sim(n=lng, list(ar=0.8, ma=0), sd=0.5)
par(mfrow=c(1,1), cex.axis=1, cex.lab=1, cex.main=1, fg="white", bg="black",
col.axis="white", col.lab="white", col.main="white")
plot(Y, col="yellow")
set.seed(100)
lng=100
Y=arima.sim(n=lng, list(ar=0.2, ma=0), sd=0.5)
par(mfrow=c(1,1), cex.axis=1, cex.lab=1, cex.main=1, fg="white", bg="black",
col.axis="white", col.lab="white", col.main="white")
plot(Y, col="yellow")
set.seed(100)
lng=100
Y=arima.sim(n=lng, list(ar=0.5, ma=0), sd=0.5)
par(mfrow=c(1,1), cex.axis=1, cex.lab=1, cex.main=1, fg="white", bg="black",
col.axis="white", col.lab="white", col.main="white")
plot(Y, col="yellow")
set.seed(100)
lng=1000
Y=arima.sim(n=lng, list(ar=0.5, ma=0), sd=0.5)
par(mfrow=c(1,1), cex.axis=1, cex.lab=1, cex.main=1, fg="white", bg="black",
col.axis="white", col.lab="white", col.main="white")
plot(Y, col="yellow")
hist(Y, col="black")
lag.plot(Y, lag=16)
hist(Y, col="black")
lag.plot(Y, lag=16)
par(mfrow=c(1,2),cex.axis=1, cex.lab=1, cex.main=1, fg="white",
col.axis="white", col.lab="white", col.main="white", bg="black")
acf(Y, ci.col="white")
pacf(Y, ci.col="white")
Ytrain<-Y[1:floor(2*lng/3)]
est<-arima(Ytrain, order=c(1,0,0), include.mean=TRUE)
est
AIC(est)
BIC(est)
res<-est$residuals
par(mfrow=c(2,2),cex.axis=1, cex.lab=1, cex.main=1, fg="white",
col.axis="white", col.lab="white", col.main="white", bg="black")
acf(res, ci.col="white")
res<-est$residuals
par(mfrow=c(2,2),cex.axis=1, cex.lab=1, cex.main=1, fg="white",
col.axis="white", col.lab="white", col.main="white", bg="black")
acf(res, ci.col="white")
pacf(res, ci.col="white")
hist(res)
qqnorm(res)
qqline(res)
shapiro.test(res)
Ytest<-as.ts(Y[ceiling(2*lng/3):lng])
frc<-predict(est, n.ahead=length(Ytest))
par(mfrow=c(1,1),cex.axis=1, cex.lab=1, cex.main=1, fg="white",
col.axis="white", col.lab="white", col.main="white", bg="black")
plot((length(Ytrain)-19):(length(Ytrain)+15),
Y[(length(Ytrain)-19):(length(Ytrain)+15)],
type="o", xlab="Time", ylab="Y", main="Forecasting")
points((length(Ytrain)+1):(length(Ytrain)+15),frc$pred[1:15],
type="o", col="yellow")
abline(v=length(Ytrain), col="white", lty="dashed")
calcio=(data$settore=="calcio")
View(est)
View(printSensitivityObj)
library(prophet)
library(plyr)
library(ggplot2)
library(Metrics)
library(carData)
library(ggfortify)
library(scales)
setwd("C:\\Users\\abete\\OneDrive\\Desktop\\Università\\Data science lab\\Progetto-Data-Science-Lab\\data")
d<-read.csv("calcio_trimestrale.csv", sep=",")
d$year<-as.Date(d$year)
#Creazione training set CALCIO TRIMESTRALE:
ds<-d$year[25:32]
y<-d$revenue[25:32]
train<-data.frame(ds,y)
#Modello prophet con previsione di 3 mesi:
m <- prophet(train,interval.width=0.95, n.changepoints = 4)
m
m$changepoints
future <- make_future_dataframe(m, periods = 90)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
#Visualizzazione con previsione
forecast$ds<-as.Date(forecast$ds)
plot(m,forecast)+scale_y_continuous(n.breaks =10)+ labs(y="revenue",x="time")+add_changepoints_to_plot(m)
#visualizzazione singoli componenti della previsione(trend, weekly, yearly, daily)
prophet_plot_components(m, forecast)
#Creazione test set
ds_test<-d$year[33]
y_test<-d$revenue[33]
test<-data.frame(ds_test,y_test)
#MAPE PESCA TRIMESTRALE
M=mape(y_test,forecast$yhat)
MAPE=M*100
MAPE
library(prophet)
library(plyr)
library(ggplot2)
library(Metrics)
library(carData)
library(ggfortify)
library(scales)
setwd("C:\\Users\\abete\\OneDrive")
d_mc<-read.csv("calcio_mensile.csv", sep=",")
d_mc$Datetime<-as.Date(d_mc$Datetime)
#Creazione training set CALCIO MENSILE:
ds<-d_mc$Datetime[73:96]
y<-d_mc$totale[73:96]
train<-data.frame(ds,y)
#Modello prophet con previsione di 365 giorni:
m <- prophet(train,interval.width=0.95, n.changepoints = 4)
m
m$changepoints
future <- make_future_dataframe(m, periods = 365)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
#Visualizzazione con previsione
forecast$ds<-as.Date(forecast$ds)
plot(m,forecast)+scale_y_continuous(n.breaks =10)+ labs(y="revenue",x="time")+add_changepoints_to_plot(m)
#visualizzazione singoli componenti della previsione(trend, weekly, yearly, daily)
prophet_plot_components(m, forecast)
group_by()
#Creazione test set
ds_test<-d_mc$Datetime[97:100]
y_test<-d_mc$totale[97:100]
test<-data.frame(ds_test,y_test)
#MAPE PESCA TRIMESTRALE
M=mape(y_test,forecast$yhat)
MAPE=M*100
MAPE
library(prophet)
library(plyr)
library(ggplot2)
library(Metrics)
library(carData)
library(ggfortify)
library(scales)
setwd("C:\\Users\\abete\\OneDrive")
d_mc<-read.csv("calcio_mensile.csv", sep=",")
d_mc$Datetime<-as.Date(d_mc$Datetime)
#Creazione training set CALCIO MENSILE:
ds<-d_mc$Datetime[73:96]
y<-d_mc$totale[73:96]
train<-data.frame(ds,y)
#Modello prophet con previsione di 365 giorni:
m <- prophet(train,interval.width=0.95, n.changepoints = 4)
m
m$changepoints
future <- make_future_dataframe(m, periods = 365)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
#Visualizzazione con previsione
forecast$ds<-as.Date(forecast$ds)
plot(m,forecast)+scale_y_continuous(n.breaks =10)+ labs(y="revenue",x="time")+add_changepoints_to_plot(m)
#visualizzazione singoli componenti della previsione(trend, weekly, yearly, daily)
prophet_plot_components(m, forecast)
group_by()
#Creazione test set
ds_test<-d_mc$Datetime[97:100]
y_test<-d_mc$totale[97:100]
test<-data.frame(ds_test,y_test)
#MAPE calcio mensile
M=mape(y_test,forecast$yhat)
MAPE=M*100
MAPE
library(prophet)
library(plyr)
library(ggplot2)
library(Metrics)
library(carData)
library(ggfortify)
library(scales)
setwd("C:\\Users\\abete\\OneDrive\\Desktop\\Università\\Data science lab\\Progetto-Data-Science-Lab\\data")
d<-read.csv("calcio_trimestrale.csv", sep=",")
d$year<-as.Date(d$year)
#Creazione training set CALCIO TRIMESTRALE:
ds<-d$year[25:32]
y<-d$revenue[25:32]
train<-data.frame(ds,y)
#Modello prophet con previsione di 3 mesi:
m <- prophet(train,interval.width=0.95, n.changepoints = 4)
m
m$changepoints
future <- make_future_dataframe(m, periods = 90)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
#Visualizzazione con previsione
forecast$ds<-as.Date(forecast$ds)
plot(m,forecast)+scale_y_continuous(n.breaks =10)+ labs(y="revenue",x="time")+add_changepoints_to_plot(m)
#visualizzazione singoli componenti della previsione(trend, weekly, yearly, daily)
prophet_plot_components(m, forecast)
#Creazione test set
ds_test<-d$year[33]
y_test<-d$revenue[33]
test<-data.frame(ds_test,y_test)
#MAPE CALCIO TRIMESTRALE
M=mape(y_test,forecast$yhat)
MAPE=M*100
MAPE
